Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №3 
з дисципліни "Архітектура програмного забезпечення"
на тему: "РОЗРОБКА ВЕБКЛІЄНТА СИСТЕМИ"




Виконав 
ст. гр. ПЗПІ-22-1
Токар Денис Юрійович


Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович



Харків 2025 р.
1 Історія змін
№	Дата      	Версія звіту	Опис змін та виправлень
1	11.06.2025	0.1	Створення і заповнення


2 ЗАВДАННЯ
Розробити та реалізувати клієнтську веб-частину програмної системи автономних теплиць, що забезпечує користувацький інтерфейс для взаємодії з серверною частиною, включаючи функціонал реєстрації, автентифікації, управління теплицями, датчиками, правилами автоматизації, візуалізації даних, а також окремий інтерфейс для адміністратора системи з розширеними правами.

3 ОПИС ВИКОНАНОЇ РОБОТИ
Для досягнення поставленої мети було необхідно виконати наступні завдання з розробки веб-клієнта:
    1. Створення базової структури проекту:
    • Налаштувати React-додаток з використанням create-react-app або аналогічного інструменту.
    • Організувати структуру тек та компонентів для сторінок, UI-елементів, сервісів, хуків та контекстів.
    2. Реалізація функціоналу автентифікації та авторизації:
    • Створити сторінки та форми для реєстрації та входу користувачів.
    • Розробити сервіс для взаємодії з API бекенду для автентифікаційних запитів.
    • Реалізувати механізм управління станом автентифікації користувача (наприклад, за допомогою React Context API).
    • Забезпечити зберігання та використання JWT токенів для авторизованих запитів.
    • Створити захищені маршрути (Protected Routes) для сторінок, доступних лише автентифікованим користувачам та користувачам з певними ролями.
    3. Розробка інтерфейсу для звичайного користувача (роль 'user'):
    • Головна сторінка: Загальна інформація та навігація.
    • Сторінка "Мої Теплиці": Відображення списку теплиць користувача, можливість створення нової теплиці (з введенням hardwareId), редагування та видалення своїх теплиць.
    • Сторінка деталей теплиці користувача: Відображення детальної інформації про обрану теплицю, включаючи список її датчиків (тільки перегляд), список правил автоматизації (з можливістю CRUD операцій та зміни статусу) та список логів.
    • Сторінка статистики теплиці: Візуалізація історичних даних з датчиків у вигляді графіків та таблиць, з можливістю фільтрації за датою.
    4. Розробка інтерфейсу для адміністратора системи (роль 'admin'):
    • Панель адміністратора: Окремий розділ з доступом до адміністративних функцій.
    • Керування користувачами: Відображення списку всіх користувачів, можливість редагування їх даних (включаючи роль) та видалення.
    • Керування всіма теплицями: Відображення списку всіх теплиць в системі, можливість створення, редагування (включаючи власника та hardwareId) та видалення будь-якої теплиці.
    • Сторінка деталей теплиці (адмінський вигляд): Повний доступ до інформації та управління датчиками (CRUD, зміна статусу) та правилами будь-якої теплиці.
    • Керування дозволеними hardwareId: Інтерфейс для перегляду, додавання, редагування та видалення hardwareId зі списку дозволених.
    • Перегляд системних логів: Доступ до всіх логів системи з можливістю фільтрації.
    5. Реалізація навігації та загального макету:
    • Створення компонентів Header (навігаційна панель) та Footer.
    • Налаштування динамічної навігації в залежності від статусу автентифікації та ролі користувача.
    6. Взаємодія з REST API серверної частини:
    • Використання бібліотеки axios для виконання HTTP-запитів.
    • Обробка відповідей від сервера та відображення помилок користувачеві.
    7. Стилізація: Застосування CSS Modules для ізоляції стилів компонентів та забезпечення консистентного дизайну.
Веб-клієнт для програмної системи автономних теплиць було розроблено з використанням бібліотеки ReactJS. Для ініціалізації проекту та базового налаштування було використано create-react-app. Структура проекту була організована шляхом поділу на теки для компонентів (components), сторінок (pages), сервісів для роботи з API (services), кастомних хуків (hooks), контекстів (contexts) та маршрутизації (routes).
1. Автентифікація та Авторизація:
Було реалізовано сторінки для реєстрації (RegisterPage) та входу (LoginPage) з відповідними формами (RegisterForm, LoginForm). Взаємодія з бекендом для цих операцій здійснюється через authService.js, який надсилає запити на ендпоінти /api/users/register та /api/users/login. Для управління станом автентифікації користувача та надання доступу до даних поточного користувача в усьому додатку було створено AuthContext та кастомний хук useAuth. Після успішної автентифікації JWT токен зберігається в localStorage і використовується для подальших авторизованих запитів за допомогою допоміжної функції authHeader.js. Для захисту маршрутів створено компонент ProtectedRoute, який перевіряє наявність користувача та, за потреби, його роль (admin або user) перед наданням доступу до сторінки.
2. Навігація та Макет:
Створено компоненти Navbar та Footer. Navbar динамічно відображає пункти меню залежно від того, чи авторизований користувач, та яка у нього роль. Для навігації між сторінками використовується react-router-dom. Основний макет додатку (AppRoutes.js) включає Navbar, область для відображення основного контенту сторінок та Footer.
3. Функціонал для Звичайного Користувача:
    • Сторінка "Мої Теплиці" (UserGreenhousesPage): Після автентифікації користувач потрапляє на цю сторінку (або може перейти на неї з навігації). Тут відображається список теплиць, що належать поточному користувачеві. Реалізовано модальне вікно (UserGreenhouseFormModal) для створення нової теплиці (з обов'язковим введенням hardwareId зі списку доступних, отриманого з бекенду) та для редагування назви/локації існуючої теплиці. Також присутня функція видалення теплиці.
    • Сторінка Деталей Теплиці Користувача (UserGreenhouseDetailPage): Надає детальну інформацію про обрану теплицю, включаючи її основні параметри, а також три окремі секції для відображення:
        ◦ Датчики: Список стандартних та можливих користувацьких датчиків з їх поточним статусом та останніми показниками. Користувач може лише переглядати цю інформацію.
        ◦ Правила: Список правил автоматизації для даної теплиці. Користувач може створювати нові правила (тільки sensor_based), редагувати існуючі (умови, дії, порогові значення), видаляти їх та змінювати статус (активне/неактивне) за допомогою модального вікна (RuleFormModalUser).
        ◦ Логи: Відображення останніх логів, пов'язаних з цією теплицею.
    • Сторінка Статистики Теплиці (UserStatisticsPage): Дозволяє користувачеві переглядати історію показників для кожного активного датчика його теплиці. Реалізовано фільтр за діапазоном дат. Дані візуалізуються за допомогою бібліотеки Chart.js (через react-chartjs-2) у вигляді лінійних графіків, а також дублюються у вигляді таблиці з останніми значеннями.
4. Функціонал для Адміністратора:
    • Доступ до адміністративних сторінок обмежений для користувачів з роллю 'admin'.
    • Керування Користувачами (AdminUsersPage): Відображає таблицю всіх зареєстрованих користувачів. Реалізовано модальне вікно (EditUserModal) для редагування даних користувача (ім'я, email, роль, можливість скидання пароля) та функцію видалення користувачів.
    • Керування Всіма Теплицями (AdminGreenhousesPage): Аналогічно користувацькій сторінці теплиць, але відображає всі теплиці в системі. Адміністратор може створювати нові теплиці (прив'язуючи їх до будь-якого користувача та обираючи вільний hardwareId), редагувати дані будь-якої теплиці (включаючи зміну власника та hardwareId) та видаляти їх.
    • Сторінка Деталей Теплиці (AdminGreenhouseDetailPage): Надає такий самий вигляд, як і користувацька сторінка деталей, але з розширеними правами. Адміністратор може створювати, редагувати та видаляти будь-які датчики (окрім стандартних, які не можна видалити, лише деактивувати) та правила для обраної теплиці.
    • Керування Дозволеними hardwareId (AdminHardwareIdPage): Відображає список всіх hardwareId, що зберігаються на бекенді (в колекції AllowedHardware). Адміністратор може додавати нові ID до списку, редагувати їх опис та сам ID (якщо він не прив'язаний до теплиці), а також видаляти ID (також з перевіркою на прив'язку).
5. Взаємодія з API та Стилізація:
Усі операції з даними виконуються через асинхронні запити до REST API серверної частини за допомогою бібліотеки axios. Створено сервісні файли (authService.js, adminService.js, greenhouseService.js) для інкапсуляції логіки API запитів. Для стилізації компонентів переважно використовується підхід CSS Modules, що забезпечує локальну область видимості стилів та консистентний дизайн на різних сторінках.
Розроблений веб-клієнт надає необхідний інтерфейс для взаємодії з системою як для звичайних користувачів, так і для адміністраторів, реалізуючи ключовий функціонал, визначений у завданні.
В додатку А наведено відеозапис презентації веб-застосунку, в додатку Б наведений дизайн всіх основних екранів веб-застосунку.

4 ВИСНОВКИ
В ході виконання даної лабораторної роботи було розроблено та реалізовано клієнтську веб-частину для програмної системи автономних теплиць. Розробка велася з використанням бібліотеки ReactJS.
Основні досягнуті результати:
    1. Створено функціональний користувацький інтерфейс, що забезпечує реєстрацію нових користувачів та автентифікацію існуючих за допомогою JWT.
    2. Реалізовано розмежування доступу на основі ролей ("користувач" та "адміністратор"), що дозволяє надавати відповідний набір функцій та прав для кожної категорії користувачів.
    3. Для звичайних користувачів розроблено інтерфейси для управління власними теплицями (створення з прив'язкою hardwareId, редагування, видалення), перегляду даних з датчиків, повного управління правилами автоматизації (CRUD та зміна статусу), а також перегляду логів та статистики показників датчиків з графіками.
    4. Для адміністраторів створено окрему панель з розширеними можливостями, включаючи управління всіма користувачами системи, всіма теплицями (з можливістю зміни власника та hardwareId), повним управлінням датчиками та правилами для будь-якої теплиці, управлінням списком дозволених hardwareId та переглядом всіх системних логів.
    5. Забезпечено взаємодію з серверною частиною через REST API для всіх операцій з даними, а також реалізовано динамічну навігацію та консистентний дизайн сторінок за допомогою CSS Modules.
Розроблений веб-клієнт є важливим компонентом програмної системи, що надає користувачам та адміністраторам зручні інструменти для ефективної взаємодії з "розумними теплицями". Реалізований функціонал відповідає поставленим завданням та створює основу для подальшого розширення можливостей системи, наприклад, шляхом інтеграції більш складних аналітичних інструментів або функцій на базі штучного інтелекту. Подальша робота може бути спрямована на покращення користувацького досвіду (UX/UI), оптимізацію продуктивності та розширення функціоналу відповідно до відгуків користувачів та нових вимог.

Додаток А(посилання на відеозапис доповіді та текст хронологічного опису доповіді)
Відеозапис доповіді на YouTube: https://youtu.be/pn69Miczo6s
Текст Хронологічного опису:
00:00 Представлення та вступ до демонстрації веб-клієнта системи
00:27 Реєстрація нового користувача та автоматична авторизація
00:49 Створення нової теплиці: вибір hardware ID та налаштування
01:17 Огляд функцій управління теплицею: редагування та видалення
01:28 Перегляд деталей теплиці: стандартні датчики та правила автоматизації
01:46 Налаштування правил автоматизації та зміна їх статусу
02:04 Перегляд логів системи та історії дій
02:15 Демонстрація статистики та візуалізації даних з датчиків
02:29 Графіки та таблиці значень датчиків з фільтрацією за датою
03:04 Функціонал адміністратора: панель керування користувачами
03:28 Адміністрування теплиць: редагування датчиків та правил
03:50 Управління hardware ID та прив'язка IoT-пристроїв
04:13 Система успадкування теплиць при видаленні користувачів
04:33 Каскадне видалення даних теплиці та завершення демонстрації
04:53 Подяка за увагу


Додаток Б (екрани розробленого додатку)

Рисунок Б.1 – Екран логіну/реєстрації в додатку.


Рисунок Б.2 – Головний екран додатку.


Рисунок Б.3 – Екран «Мої теплиці».


Рисунок Б.4 – Екран редагування/створення теплиць.


Рисунок Б.5 – Екран деталей теплиці.


Рисунок Б.6 – Екран додавання/редагування правил.


Рисунок Б.7 – Екран статистики отриманих даних для теплиці.


Рисунок Б.8 – Екран керування користувачами у адміністраторів


Рисунок Б.9 – Екран редагування користувачів у адміністраторів.


Рисунок Б.10 – Екран керування дозволеними Hardware ID у адміністраторів.


Рисунок Б.11 – Екран керування теплицями у адміністраторів.


Рисунок Б.12 – Екран редагування/створення теплиць у адміністраторів.


Рисунок Б.13 – Екран детальної інформації про теплицю у адміністраторів.


Рисунок Б.14 – Екран редагування/створення датчиків у адміністраторів.


Рисунок Б.15 – Екран редагування/створення правил у адміністраторів.
