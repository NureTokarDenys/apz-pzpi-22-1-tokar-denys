Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
з практичної роботи №1 
з дисципліни "Архітектура програмного забезпечення"
на тему: "Патерни проєктування"




Виконав 
ст. гр. ПЗПІ-22-1
Токар Денис Юрійович


Перевірив
Доц. катедри ПІ
Лещинський Володимир Олександрович



Харків 2025 р.
1 Історія змін
№	Дата      	Версія звіту	Опис змін та виправлень
1	07.06.2025	0.1	Створення і заповнення


2 ЗАВДАННЯ
Метою практичного заняття №1 було поглиблене вивчення одного з патернів проєктування програмного забезпечення на основі класичної праці Е. Гамми, Р. Хелма, Р. Джонсона та Дж. Вліссідеса "Design Patterns: Elements of Reusable Object-Oriented Software" (GoF), за винятком патерну "Одинак" (Singleton).
В рамках виконання завдання було обрано для дослідження структурний патерн проєктування "Фасад" (Facade).

3 ОПИС ВИКОНАНОЇ РОБОТИ
В ході виконання практичного завдання №1 було проведено комплексне дослідження структурного патерну проєктування "Фасад" (Facade). Робота складалася з наступних етапів:
    1. Теоретичне дослідження патерну "Фасад":
    • На основі книги "Design Patterns: Elements of Reusable Object-Oriented Software" (GoF) було детально вивчено розділ, присвячений патерну "Фасад".
    • Проаналізовано призначення патерну – надання уніфікованого та спрощеного інтерфейсу до складної підсистеми, що складається з багатьох класів.
    • Розглянуто мотивацію його використання, зокрема, необхідність зменшення зв'язності між клієнтським кодом та компонентами підсистеми, а також спрощення роботи зі складною логікою.
    • Визначено типові випадки застосовності патерну.
    • Детально вивчено структуру патерну "Фасад", включаючи його основних учасників: Facade (Фасад) та Subsystem classes (Класи підсистеми). Була створена відповідна UML-діаграма класів.
    • Проаналізовано взаємодію між учасниками, де Facade делегує запити клієнта відповідним об'єктам підсистеми.
    • Розглянуто наслідки застосування патерну, зокрема його переваги (ізоляція клієнтів від складності підсистеми, зменшення зв'язності, полегшення рефакторингу підсистеми) та потенційні недоліки (ризик перетворення Фасаду на "божественний об'єкт").
    2. Розробка прикладу реалізації:
    • Для наочної демонстрації роботи патерну "Фасад" було розроблено приклад програмного коду на мові програмування Java.
    • Приклад ілюструє керування компонентами уявного домашнього кінотеатру через єдиний фасадний клас, що спрощує взаємодію для клієнта.
    • У коді було виділено ключові компоненти підсистеми та клас-фасад, що агрегує їх та надає спрощений інтерфейс.
    3. Підготовка текстової частини звіту (доповіді):
    • Зібрана теоретична інформація та розроблений приклад були систематизовані та оформлені у вигляді структурованого звіту.
    • Звіт містить опис призначення, структури, переваг, недоліків та приклад реалізації патерну "Фасад".
    4. Створення презентації:
    • На основі текстової доповіді було розроблено презентацію у форматі слайдів.
    • Презентація включає:
    • Визначення та мету патерну "Фасад".
    • UML-діаграму структури патерну.
    • Аналогії з реального життя для кращого розуміння.
    • Ключові фрагменти програмного коду з поясненнями.
    • Перелік переваг та недоліків.
    • Висновки щодо застосування патерну.
    • Для візуалізації були підібрані відповідні зображення, що ілюструють концепції патерну та його аналогії.
Вся робота була спрямована на глибоке розуміння суті патерну "Фасад" та його практичної цінності у розробці програмного забезпечення.
Посилання на відеозапис доповіді та текст хронологічного опису доповіді знаходиться в додатку А. Слайди презентації в додатку Б, а код для демонстрації патерну в додатку В.

4 ВИСНОВКИ
За результатами виконання практичного завдання №1 було поглиблено знання щодо структурних патернів проєктування, зокрема, детально вивчено патерн "Фасад" (Facade).
Основні висновки, зроблені в ході роботи:
    1. Патерн "Фасад" є ефективним інструментом для спрощення взаємодії зі складними підсистемами. Він надає єдину, високорівневу точку входу, приховуючи від клієнта внутрішню складність та деталі реалізації компонентів підсистеми.
    2. Ключовою перевагою використання "Фасаду" є зменшення зв'язності (decoupling) між клієнтським кодом та підсистемою. Це дозволяє змінювати або розвивати підсистему без необхідності внесення змін до клієнтського коду, за умови стабільності інтерфейсу Фасаду.
    3. Застосування патерну "Фасад" сприяє кращому структуруванню системи, дозволяючи розбивати її на логічні підсистеми з чітко визначеними інтерфейсами.
    4. При реалізації патерну важливо збалансувати функціональність Фасаду, щоб уникнути його перетворення на "божественний об'єкт", який концентрує занадто багато відповідальності та сам стає складним у підтримці.
    5. На практиці патерн "Фасад" знаходить широке застосування при роботі зі складними бібліотеками, фреймворками, при проєктуванні багатошарових архітектур та для обгортання успадкованого коду (legacy code).
Вивчення патерну "Фасад" та підготовка доповіді дозволили не тільки зрозуміти його теоретичні основи, але й оцінити практичну користь від його застосування для підвищення якості, гнучкості та підтримуваності програмних систем. Отримані знання та навички є цінними для подальшої інженерної практики в галузі розробки програмного забезпечення.

Додаток А(посилання на відеозапис доповіді та текст хронологічного опису доповіді)
Відеозапис доповіді на YouTube: https://youtu.be/17f_BboYdvg
Текст Хронологічного опису:
00:00 Вступне слово та анонс теми
00:11 Паттерн "Фасад" – спрощення взаємодії
00:22 Ілюстрація проблеми – складність домашнього кінотеатру
00:47 Ключова ідея паттерну "Фасад" – єдина точка входу
01:02 Основні учасники (актори) паттерну "Фасад"
01:39 Покроковий механізм роботи паттерну "Фасад"
02:05 Аналогії паттерну "Фасад" з реального життя
02:37 Введення в приклад коду – підсистема домашнього кінотеатру
02:50 Демонстрація класу "Фасад" – HomeTheaterFacade
03:11 Робота клієнта з "Фасадом" – спрощення коду
03:23 Переваги використання паттерну "Фасад"
03:51 Потенційні недоліки паттерну "Фасад"
04:15 Рекомендації щодо використання паттерну "Фасад"
04:28 Додаткові сценарії застосування та підсумок
04:48 Заключні тези

Додаток Б (слайди презентації доповіді)

Рисунок Б.1 - Слайд 1 – Титульний.


Рисунок Б.2 - Слайд 2 – Проблема: складність системи без фасаду.

Рисунок Б.3 - Слайд 3 – Рішення: патерн "Фасад".


Рисунок Б.4 - Слайд 4 – Учасники та їхні ролі.

Рисунок Б.5 - Слайд 5 – Принцип роботи.


Рисунок Б.6 - Слайд 6 – Аналогія з реального життя.

Рисунок Б.7 - Слайд 7 – Практичний приклад (внутрішні класи).


Рисунок Б.8 - Слайд 8 –  Практичний приклад (Фасад та Клієнт).

Рисунок Б.9 - Слайд 9 - Переваги використання "Фасаду".


Рисунок Б.10 - Слайд 10 - Недоліки та можливі проблеми.

Рисунок Б.11 - Слайд 11 - Коли варто використовувати "Фасад"?


Рисунок Б.12 - Слайд 12 – Висновки.

Додаток В (приклади програмного коду)
// Amplifier.java
class Amplifier {
    public void on() { System.out.println("Підсилювач звуку увімкнено"); }
    public void setDvd(DvdPlayer dvd) { System.out.println("Джерело звуку: DVD"); }
    public void setVolume(int level) { System.out.println("Гучність: " + level); }
    public void off() { System.out.println("Підсилювач звуку вимкнено"); }
}

// DvdPlayer.java
class DvdPlayer {
    public void on() { System.out.println("DVD плеєр увімкнено"); }
    public void play(String movie) { System.out.println("Відтворення фільму: \"" + movie + "\""); }
    public void stop() { System.out.println("DVD: Стоп"); }
    public void eject() { System.out.println("DVD: Диск вилучено"); }
    public void off() { System.out.println("DVD плеєр вимкнено"); }
}
// Projector.java
class Projector {
    public void on() { System.out.println("Проектор увімкнено"); }
    public void wideScreenMode() { System.out.println("Проектор: широкоекранний режим"); }
    public void off() { System.out.println("Проектор вимкнено"); }
}

// Screen.java (Екран)
class Screen {
    public void down() { System.out.println("Екран опущено"); }
    public void up() { System.out.println("Екран піднято"); }
}
public class HomeTheaterFacade {
    private Amplifier amp;
    private DvdPlayer dvd;
    private Projector projector;
    private Screen screen;

    public HomeTheaterFacade(Amplifier amp, DvdPlayer dvd,
                             Projector projector, Screen screen) {
        this.amp = amp;
        this.dvd = dvd;
        this.projector = projector;
        this.screen = screen;
    }
    public void watchMovie(String movie) {
        System.out.println("\nГотуємось дивитись фільм...");
        screen.down();
        projector.on();
        projector.wideScreenMode();
        amp.on();
        amp.setDvd(dvd);
        amp.setVolume(5);
        dvd.on();
        dvd.play(movie);
    }
    public void endMovie() {
        System.out.println("\nЗавершуємо перегляд фільму...");
        dvd.stop();
        dvd.eject();
        dvd.off();
        amp.off();
        projector.off();
        screen.up();
    }
}
public class Client {
    public static void main(String[] args) {
        // Ініціалізація компонентів підсистеми
        Amplifier amp = new Amplifier();
        DvdPlayer dvd = new DvdPlayer();
        Projector projector = new Projector();
        Screen screen = new Screen();

        // Створення Фасаду
        HomeTheaterFacade homeTheater = new HomeTheaterFacade(
                                            amp, dvd, projector, screen);

        // Використання Фасаду
        homeTheater.watchMovie("Інтерстеллар");
        homeTheater.endMovie();
    }
}
