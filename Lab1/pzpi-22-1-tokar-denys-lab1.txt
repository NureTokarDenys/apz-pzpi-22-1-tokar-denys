﻿Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
з лабораторної роботи №1 
з дисципліни "Архітектура програмного забезпечення"
на тему: "РОЗРОБКА VISION & SCOPE"



Виконав 
ст. гр. ПЗПІ-22-1
Токар Денис Юрійович


Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович


Харків 2025 р.
1 Історія змін
№	Дата      	Версія звіту	Опис змін та виправлень
1	08.06.2025	0.1	Створення і заповнення


2 ЗАВДАННЯ
Зробити зміни в документ Vision & Scope, який було створено минулого семестру, а саме в розділ 3 Scope and Limitations, щоб він відповідав усій системі, включно з частиною мобільного та веб застосунку.

3 ОПИС ВИКОНАНОЇ РОБОТИ
Тема проекту: Програмна система для автоматизації роботи теплиць.
Під час виконання було оновлено документ у форматі Vision & Scope (див. додаток Б) для обраної теми проєкту. Також записано відеозапис (див. додаток А) з демонстрацією цього документа з описаним проектом.

4 ВИСНОВКИ
Під час виконання лабораторної роботи було оновлено документ Vision&Scope. Внесені зміни стосувалися обсягу проекту, а саме серверної частини, веб та мобільного застосунків.

Додаток А(посилання на відеозапис доповіді та текст хронологічного опису доповіді)
Відеозапис доповіді на YouTube: https://youtu.be/hw8-JOcUusg
Текст Хронологічного опису:
0:00 Представлення
00:07 – Мета лабораторної роботи
00:17 – Розділ 3. Рамки та обмеження проєкту
00:30 – Підрозділ 3.1 Рамки первинного випуску
02:32 – Підрозділ 3.2 Рамки наступних випусків
03:22 – Підрозділ 3.3 Обмеження та виключення
04:33 – Подяка за перегляд

Додаток Б(Оновлений документ Vision&Scope)

Vision and Scope Document
для
Програмна система автономних теплиць
Версія 2.0 
Автор Токар Денис Юрійович
Харківський національний університет радіоелектроніки
08.06.2025
Зміст

Історія перевірок		Бізнес вимоги	2
1.1.	Передумови	1
1.2.	Бізнес-можливості	1
1.3.	Бізнес-цілі та критерії успіху	2
1.4.	Потреби клієнтів та ринку	3
1.5.	Бізнес-ризики	3
2.	Концепція рішення	5
2.1.	Окреслення концепції	5
2.2.	Основна функціональність	5
2.3.	Припущення та залежності	6
3.	Рамки та обмеження проекту	6
3.1.	Рамки первинного випуску	6
3.2.	Рамки наступних випусків	6
3.3.	Обмеження та винятки	7
4.	Бізнес-контент	8
4.1.	Зацікавлені сторони	8
4.2.	Пріоритети проекту	8
4.3.	Робоче середовище	9



Історія перевірок


Назва	Дата	Причина зміни	Версія
Створення документу	09.12.2024	Створення документу	1.0
Модифікація документу	08.06.2025	Додавання нових вимог та функціоналу	2.0
    1. Бізнес вимоги
Бізнес-вимоги слугують фундаментальною основою для всіх вимог. Їх було зібрано від потенційних користувачів системи: експертів аграрного сектору та безпосередніх користувачами системи управління теплицями. 
        1.1. Передумови
Розвиток сучасного сільського господарства вимагає впровадження інноваційних технологічних рішень для подолання традиційних викликів у 
вирощуванні рослин. Існуючі підходи до управління теплицями характеризуються:
    • Низькою точністю контролю екосистеми
    • Значними ризиками втрати врожайності
    • Неефективним використанням природних ресурсів
    • Високою залежністю від людського фактору
Проектована система має на меті революціонізувати підхід до автоматизованого землеробства через комплексне технологічне рішення з інтелектуального моніторингу та управління мікрокліматом.

        1.2. Бізнес-можливості
У сучасному агротехнологічному ландшафті спостерігається стійкий попит на інтелектуальні системи, здатні забезпечити:
    • Неперервний моніторинг екологічних параметрів
    • Повну автоматизацію процесів життєзабезпечення рослин
    • Прецизійне налаштування середовища вирощування
    • Мінімізацію впливу суб'єктивних чинників
Моє рішення заповнює ключові прогалини ринку агротехнологій, пропонуючи:
    • Комплексну платформу IoT-інтеграції
    • Багатофункціональний інтерфейс управління
    • Адаптивні алгоритми прийняття рішень
    • Поглиблену аналітику стану екосистеми теплиці
        1.3. Бізнес-цілі та критерії успіху
Стратегічні бізнес-орієнтири проекту:
БЦ-1 Підвищити ефективність теплиць через автоматизований клімат контроль, що здійснюється на основі зібраної датчиками статистики
БЦ-1.1 Впровадження інтелектуального контролю мікроклімату
БЦ-1.2 Розробка user-friendly екосистеми управління
БЦ-1.3 Створення системи адаптивного реагування

КУ-1.1 Підвищення врожайності на 30% через технологічну оптимізацію
КУ-1.2 Редукція витрат водних ресурсів на 40%
КУ-1.3 Досягнення 95% автономності управлінських процесів

БЦ-2 Забезпечення технологічної масштабованості
БЦ-2.1 Формування гнучкої мережевої архітектури
БЦ-2.2 Адаптація під потреби користувача

КУ-2.1 Підтримка мережі до 50 інтегрованих теплиць
КУ-2.2 Сумісність з мінімум 10 варіаціями культур

БЦ-3 Створення комерційно привабливого продукту
БЦ-3.1 Формування мінімально життєздатного продукту (MVP)
БЦ-3.2 Підготовка стратегії виходу на ринок

КУ-3.1 Залучення перших клієнтів протягом піврічного періоду
КУ-3.2 Отримання інвестиційної підтримки

        1.4. Потреби клієнтів та ринку
Цільові користувачі системи автономних теплиць стикаються з низкою викликів у процесі сучасного сільськогосподарського виробництва. Основні потреби включають:
    1. Точний моніторинг параметрів вирощування
    • Необхідність отримання миттєвої та точної інформації про стан мікроклімату;
    • Потреба в комплексному контролі параметрів: температура, вологість, освітленість;
    • Вимога до миттєвого реагування на критичні зміни середовища.
    2. Автоматизація виробничих процесів
    • Бажання мінімізувати ручне втручання в процеси вирощування
    • Потреба в інтелектуальних системах поливу, удобрення та освітлення
    • Прагнення до оптимізації використання ресурсів
    3. Аналітика та прогнозування
    • Вимога до формування детальних звітів про стан рослин
    • Необхідність прогнозування врожайності
    • Потреба в інструментах для довгострокового планування
    4. Віддалене управління
    • Можливість контролювати теплицю з будь-якої точки світу
    • Інтеграція з веб-додатками
    5. Технологічна сумісність
    • Підтримка різних типів сільськогосподарських культур
    • Гнучкість налаштувань під унікальні вимоги

        1.5. Бізнес-ризики
Технологічні ризики:
    1. Складності IoT-інтеграції
    • Серйозність: Середня
    • Потенційні наслідки:
    • Збої в комунікації між пристроями
    • Неточність передачі даних
    • Стратегія пом'якшення:
    • Використання стандартизованих протоколів зв'язку
    • Багаторівневе резервування каналів передачі даних
    • Розробка адаптивних алгоритмів відновлення зв'язку
    2. Кібербезпекові виклики
    • Серйозність: Висока
    • Потенційні наслідки:
    • Несанкціонований доступ до системи
    • Маніпуляції з налаштуваннями теплиці
    • Стратегія пом'якшення:
    • Впровадження багатофакторної автентифікації
    • Шифрування каналів передачі даних
Ринкові ризики:
    1. Конкурентне середовище
    • Серйозність: Середня
    • Потенційні наслідки:
    • Вибір потенційними користувачами вже існуючих аналогів
    • Поява альтернативних рішень
    • Зниження унікальності пропозиції
    • Стратегія пом'якшення:
    • Постійна інновація функціоналу
    • Формування унікальної торгової пропозиції
    • Побудова екосистеми підтримки клієнтів
Фінансові ризики:
    1. Перевищення бюджету
    • Серйозність: Середня
    • Потенційні наслідки:
    • Затримки розробки
    • Скорочення функціоналу
    • Стратегія пом'якшення:
    • Гнучке планування
    • Поетапне фінансування
    • Пошук додаткових інвестицій
    2. Низька комерційна ефективність
    • Серйозність: Висока
    • Потенційні наслідки:
    • Неокупність проекту
    • Закриття напрямку
    • Стратегія пом'якшення:
    • Поступове масштабування
    • Гнучка цінова політика
    2. Концепція рішення
        2.1 Окреслення концепції
Створення інтелектуальної екосистеми для автоматизованого управління теплицями, яка забезпечує максимальну ефективність вирощування сільськогосподарських культур через інтеграцію передових технологій IoT та хмарних обчислень. Наша система перетворить традиційне землеробство на високоточне, інтелектуальне виробництво, де кожен квадратний метр теплиці оптимізований для забезпечення найкращих умов росту рослин, підвищення врожайності та мінімізації людського втручання.
        2.2  Основна функціональність

    1) Комплексний моніторинг мікроклімату теплиці: 
    • Неперервне вимірювання та аналіз параметрів навколишнього середовища (температура, вологість, освітленість)
    • Миттєве реагування на зміни кліматичних умов
    2) Інтелектуальне автоматичне керування системами теплиці:
    • Автоматизований полив з урахуванням вологості ґрунту
    • Адаптивне штучне освітлення
    • Точне внесення добрив
    • Контроль температурного режиму
    3) Веб-інтерфейс для віддаленого управління:
    • Повний моніторинг стану теплиці
    • Налаштування параметрів вирощування
    • Генерація аналітичних звітів та статистики
    4) IoT-архітектура на базі ESP32:
    • Низьковитратні та енергоефективні пристрої
    • Надійна бездротова комунікація
        2.3 Припущення та залежності
Припущення:
    • Наявні у користувачів базові технічні навички для роботи з веб-інтерфейсом;
    • Користувачі мають можливість встановлення та налаштування пристрою;
    • Наявність стабільного інтернет-з'єднання;
    • Серверна частина інфраструктури системи здатна обробляти великі обсяги даних у реальному часі без великих затримок.
Залежності:
    • Надійність роботи пристроїв інтернету речей;
    • Стабільність інтернет-з'єднання для передачі даних між IoT-пристроями та сервером;
    • Безперебійне функціонування серверної інфраструктури.

    3. Рамки та обмеження проекту
        3.1 Рамки первинного випуску
Первинний випуск системи управління автономними теплицями включатиме наступні ключові компоненти та функціональні можливості, що забезпечують повний цикл моніторингу та управління:
    • IoT-компонент (ESP32):
    1. Збір даних з датчиків: температура (DHT22), вологість (DHT22), освітленість (фоторезистор).
    2. Надсилання зібраних телеметричних даних на центральний сервер через Wi-Fi (HTTP запити).
    3. Прийом команд від сервера (наприклад, увімкнути/вимкнути полив, світло) та їх виконання через підключені реле або інші виконавчі механізми.
    • Серверна частина (Node.js, Express.js, MongoDB):
    1. API (RESTful):
    • Endpoints для CRUD-операцій (Create, Read, Update, Delete) для сутностей: Користувачі, Теплиці, Датчики, Дані Датчиків, Правила автоматизації, Журнали (Логи).
    • Аутентифікація та авторизація користувачів (JWT).
    • Прийом телеметричних даних від IoT-компонентів.
    • Надсилання команд управління на IoT-компоненти.
    2. База даних (MongoDB):
    • Зберігання інформації про користувачів (логін, хеш паролю, email).
    • Зберігання інформації про теплиці (назва, локація, прив'язка до власника, список датчиків, правил).
    • Зберігання даних з датчиків (значення, мітка часу, ID датчика).
    • Зберігання правил автоматизації (умови: порогові значення датчиків, час; дії: команди для виконавчих пристроїв)
    • Зберігання системних логів та логів подій теплиці.
    3. Бізнес-логіка:
    • Обробка та аналіз даних, що надходять від датчиків.
    • Застосування правил автоматизації на основі даних датчиків та/або часу.
    • Формування та надсилання команд на IoT-пристрої.
    • Логування всіх значущих подій системи та дій користувачів.
    • Каскадне видалення (при видаленні теплиці видаляються пов'язані датчики, правила, дані, логи).
    • Веб-клієнт (ReactJS):
    1. Реєстрація та авторизація користувачів.
    2. Інтерфейс для управління теплицями: створення, редагування, видалення.
    3. Візуалізація поточних даних з датчиків у реальному часі (графіки, показники).
    4. Перегляд історичних даних з датчиків з можливістю фільтрації та побудови графіків за період.
    5. Створення, редагування та активація/деактивація правил автоматизації для: поливу (на основі вологості ґрунту або часу), обігріву/Охолодження (на основі температури), провітрювання (на основі температури/вологості), освітлення (на основі рівня освітленості або часу), удобрення (за розкладом).
    6. Перегляд системних логів та логів подій теплиці.
    7. Керування профілем користувача.
    8. Розділення функціоналу для адміністрацторів.
    • Мобільний клієнт (Android - мінімальний функціонал):
    1. Аутентифікація користувача (використання того ж облікового запису, що й для веб-клієнта).
    2. Перегляд списку теплиць, що належать користувачу.
    3. Відображення поточних значень ключових датчиків (температура, вологість, освітленість) для обраної теплиці.
    4. Отримання push-повідомлень про критичні події (наприклад, вихід параметрів за допустимі межі, спрацювання правил, помилки обладнання).
    5. Можливість ручного увімкнення/вимкнення основних виконавчих пристроїв (наприклад, "Почати полив зараз", "Увімкнути світло").
Загальна робота системи:
IoT-пристрій (ESP32) збирає дані з датчиків та відправляє їх на сервер. Сервер зберігає дані в MongoDB. Веб-клієнт та мобільний клієнт дозволяють користувачеві переглядати ці дані, а також налаштовувати правила. На основі цих правил та поточних даних з датчиків, серверна частина приймає рішення та відправляє команди назад на ESP32 для керування виконавчими пристроями (насос для поливу, обігрівач, вентилятор, лампи тощо). Усі дії логуються.
3.2 Рамки наступних випусків
У майбутніх релізах планується інтеграція функціоналу на базі штучного інтелекту (ШІ) для підвищення ефективності, автономності та надання користувачам глибшої аналітики.
Застосування ШІ для покращення роботи системи:
    • Предиктивна аналітика мікроклімату: Прогнозування змін температури, вологості на основі історичних даних, поточних показників та, можливо, зовнішніх даних про погоду. Це дозволить системі проактивно реагувати на очікувані зміни, оптимізуючи використання ресурсів (наприклад, заздалегідь почати обігрів перед прогнозованим похолоданням).
    • Оптимізація розкладу поливу та удобрення: ШІ може аналізувати дані про вологість ґрунту, фазу росту рослин (якщо користувач вказує тип культури та дату посадки), погодні умови та рекомендувати або автоматично коригувати оптимальний режим поливу та внесення добрив, мінімізуючи витрати та максимізуючи здоров'я рослин.
    • Виявлення аномалій та потенційних проблем: Аналіз патернів даних з датчиків для виявлення нетипової поведінки, що може свідчити про несправність обладнання (наприклад, датчик перестав надсилати дані, або його показники різко змінилися без видимих причин), або про проблеми з рослинами (наприклад, різке падіння вологості ґрунту попри полив).
    • Адаптивне управління освітленням: Врахування не тільки поточного рівня освітленості, але й прогнозу сонячної активності на день, фази росту рослин та їхніх потреб у світлі для оптимізації роботи штучного освітлення.
    • Персоналізовані рекомендації: На основі аналізу даних про успішність вирощування певних культур в конкретних умовах, система може надавати користувачеві поради щодо налаштувань для нових посадок або для покращення поточних.
Збирання даних для навчання моделей ШІ:
    • Існуючі дані: Усі дані, що збираються датчиками (температура, вологість, освітленість, можливо, вологість ґрунту), часові мітки, дії, виконані системою (увімкнення/вимкнення пристроїв), налаштування правил користувачем, логи подій.
    • Дані про культури: Тип рослин, дата посадки, очікувана дата збору врожаю (вводяться користувачем).
    • Зворотний зв'язок від користувача: Оцінка стану рослин, інформація про врожайність, виявлені хвороби/шкідники (через спеціальну форму в веб/мобільному клієнті).
    • Зовнішні дані: Інтеграція з API погодних сервісів для отримання прогнозів погоди, даних про сонячну активність.
    • Спосіб збору: Дані з датчиків і дії системи вже збираються. Дані від користувача – через інтерфейс веб- та мобільного додатків. Зовнішні дані – через регулярні запити до API. Дані з камер (якщо будуть) – за розкладом або тригером. Усі дані будуть агрегуватися та зберігатися у структурованому вигляді в MongoDB або спеціалізованому сховищі даних для ШІ.
Навчання/використання моделей ШІ:
    • Предиктивна аналітика мікроклімату: Можна розпочати з донавчання існуючих моделей для часових рядів (наприклад, ARIMA, Prophet) або використовувати готові API хмарних сервісів (AWS Forecast, Google AI Platform). З часом, при накопиченні достатнього обсягу даних, можливе навчання власних моделей (LSTM, GRU).
    • Оптимізація розкладу: Це може бути комбінація експертних систем, доповнених моделями навчання з підкріпленням (Reinforcement Learning) або регресійними моделями для прогнозування потреб рослин. Початково можна використовувати готові рішення або простіші евристичні алгоритми, що навчаються на даних.
    • Виявлення аномалій: Можна використовувати статистичні методи, кластеризацію (DBSCAN, Isolation Forest) або автоенкодери. Можливо почати з готових бібліотек для anomaly detection.
    • Адаптивне управління освітленням: Подібно до оптимізації розкладу, можна використовувати моделі, що прогнозують потреби у світлі, або навчання з підкріпленням.
    • Персоналізовані рекомендації: Системи на основі правил, доповнені колаборативною фільтрацією або контент-орієнтованими підходами, якщо буде достатньо даних від різних користувачів та про різні культури.
    • Стратегія: На початкових етапах доцільно використовувати готові API хмарних провайдерів (Azure ML, AWS SageMaker, Google Vertex AI) для швидкого прототипування та перевірки гіпотез, особливо для складних задач типу прогнозування або обробки зображень. Паралельно збирати дані для поступового переходу до донавчання або розробки власних, більш кастомізованих моделей, коли це буде економічно та технічно виправдано. Для виявлення аномалій та простих оптимізацій можна використовувати бібліотеки Python (scikit-learn, TensorFlow Lite для можливого розгортання на Edge-пристроях у майбутньому).
3.3 Обмеження та винятки
Незважаючи на широкий функціонал, система матиме певні обмеження та винятки, як у первинному випуску, так і в майбутніх релізах з ШІ:
Обмеження первинного випуску:
    • Типи датчиків та виконавчих пристроїв: Підтримка обмеженого набору заздалегідь визначених типів датчиків (температура, вологість, освітленість) та стандартних виконавчих пристроїв, що керуються через реле. Інтеграція специфічних або пропрієтарних датчиків/пристроїв не передбачена без додаткової розробки.
    • Комунікація IoT-компонента: Тільки через Wi-Fi. Альтернативні канали зв'язку (LoRaWAN, NB-IoT, Ethernet) не підтримуються.
    • Локальна автономність IoT-компонента: Обмежена. У разі тривалої втрати зв'язку з сервером, ESP32 зможе виконувати лише найпростіші заздалегідь завантажені сценарії (якщо такі будуть реалізовані) або працювати за останніми отриманими командами. Складні правила та аналітика виконуються на сервері.
    • Мобільний додаток (Android): Надає переважно функції моніторингу та отримання сповіщень. Складне конфігурування правил, перегляд детальної історії або адміністрування системи через мобільний додаток у первинному випуску не передбачено (це робиться через веб-клієнт). 
    • Веб-клієнт: Не матиме режиму офлайн-роботи. Для всіх операцій потрібне активне інтернет-з'єднання з сервером.
    • Масштабування бази даних: Хоча MongoDB підтримує масштабування, первинна конфігурація буде розрахована на помірну кількість користувачів та теплиць. Екстремальні навантаження можуть потребувати оптимізації.
    • Інтеграція з сторонніми системами: Не передбачена можливість прямої інтеграції з іншими платформами агромоніторингу чи ERP-системами через API у первинному випуску.
Обмеження та винятки для майбутніх релізів з ШІ:
    • Точність прогнозів ШІ: Якість прогнозів та рекомендацій ШІ буде прямо залежати від обсягу та якості зібраних даних. На початкових етапах, з обмеженою історією, прогнози можуть бути менш точними.
    • Пояснюваність рішень ШІ (Explainable AI - XAI): Початкові моделі ШІ можуть бути "чорними скриньками". Реалізація повноцінних механізмів XAI, що детально пояснюють кожне рішення ШІ, є складною задачею і може бути відкладена.
    • Автономне прийняття критичних рішень ШІ: Система не буде повністю автономно приймати рішення, що можуть призвести до значних втрат (наприклад, тривале відключення життєво важливих систем) без можливості підтвердження або втручання користувача, особливо на ранніх етапах впровадження ШІ.
    • Підтримка всіх типів культур: Моделі ШІ для оптимізації вирощування спочатку будуть розроблятися для найпопулярніших або найбільш вивчених тепличних культур. Підтримка екзотичних або рідкісних рослин може бути обмежена.
    • Вартість використання хмарних ШІ-сервісів: Інтенсивне використання платних API для ШІ може призвести до додаткових операційних витрат для користувача або системи.
Навмисно виключений функціонал:
    • Повне офлайн управління через мобільний додаток: Складна синхронізація даних та правил робить цю функцію недоцільною для перших версій.
    • Соціальні функції: Обмін досвідом між користувачами, форуми, рейтинги теплиць – не є пріоритетом для системи автоматизації.
    • Фінансовий облік та управління продажами врожаю: Система фокусується на агротехнічних аспектах, а не на бізнес-адмініструванні.

    4. Бізнес-контент
        4.1 Зацікавлені сторони

Зацікавлена сторона	Основна цінність	
Ставлення	
Основні інтереси	
Обмеження
Індивідуальні агрономи-любителі, власники теплиць	Підвищення врожайності  Здешевлення утримання теплиць, зменшення витрат праці	Зацікавлені, але обережні щодо технологічної складності, орієнтовані на економічну ефективність	Простота використання, автоматизація процесів вирощування	Обмежений бюджет, мінімальні технічні навички
Потенційні інвестори	Фінансова привабливість	Вичікувальне, потребують доказів концепції	Масштабованість, потенціал комерціалізації	Обмеження фінансових ресурсів
Розробники	Практичний досвід розробки IoT-системи	Високмотивовані, налаштовані на технологічний виклик	Опанування сучасних технологій IoT	-

        4.2 Пріоритети проекту
Вимір	Драйвер (мета)	Обмеження	Ступінь свободи
Розклад	Створення мінімально життєздатного продукту протягом 1-2місяців	Індивідуальна розробка	Допустиме відхилення до 1 місяця
Функціональність	Реалізація базового моніторингу та автоматизації теплиці	Включити 70-80% запланованих функцій первинного випуску	Можливість винесення частини функцій у наступні версії
Якість	Стабільна робота основних компонентів системи	Проходження 80-90% тестових сценаріїв	Допустимі незначні обмеження у продуктивності
Персонал	Індивідуальна розробка	Один розробник	Повна гнучкість у прийнятті рішень
Бюджет	Мінімальні витрати на обладнання та хостинг	-	Гнучкість у виборі компонентів

        4.3 Робоче середовище
Цим програмним продуктом можна буде користуватися у браузері. Але необхідно заздалігідь підключити IoT компоненти. Архітектура системи має бути масштабованою, забезпечувати високу продуктивність та інтеграцію даних в режимі реального часу.
Технології, які використовуються:
Веб-застосунок: React (JavaScript library) 
Мобільний застосунок: Android (Kotlin, Jetpack Compose)
Серверна частина: Express (Node.js framework)
База даних: MongoDB
IoT: ESP32

